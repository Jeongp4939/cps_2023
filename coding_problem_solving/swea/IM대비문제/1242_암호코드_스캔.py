# 각 테스트 케이스의 답을 순서대로 표준출력으로 출력하며, 각 케이스마다 줄의 시작에 “#C”를 출력하여야 한다. 이때 C는 케이스의 번호이다.
# 같은 줄에 빈칸을 하나 두고, 입력에 주어진 배열에서 정상적인 암호코드들에 포함된 숫자들의 합을 출력한다.
# [참고]
# 각 테스트 케이스의 구성은 아래와 같다.
# 테스트 케이스	 N * M	암호코드 가로 길이	암호코드 개수
# 그룹 1	100 * 26	56	1
# 그룹 2	200 * 50	56 ~ 112	2
# 그룹 3	500 * 126	56 ~ 280	5
# 그룹 4	1000 * 250	제한 없음	제한 없음
# 그룹 5	2000 * 500	제한 없음	제한 없음
#
# 1. 총 8개의 숫자로 이루어져 있다.
# 2. 앞 7자리는 상품 고유의 번호를 나타내며, 마지막 자리는 검증 코드를 나타낸다.
#     - 검증코드는 아래와 같은 방법으로 계산한다.
#     “(홀수 자리의 합 x 3) + 짝수 자리의 합 + 검증 코드” 가 10의 배수가 되어야 한다.
#     상품 고유의 번호가 8801234일 경우,
#     “( ( 8 + 0 + 2 + 4 ) x 3 ) + ( 8 + 1 + 3 ) + 검증 코드”
#     = “42 + 12 + 검증 코드”
#     = “54 + 검증 코드” 가 10 의 배수가 되어야 하므로, 검증코드는 6이 되어야 한다.
#     즉, 88012346 이 정상적인 암호코드고, 그 외의 검증코드가 포함된 경우 비정상적인 암호코드다.

import sys
sys.stdin = open('input.txt','r')

dct1 = {'0': '0000', '1': '0001', '2': '0010', '3': '0011', '4': '0100', '5': '0101', '6': '0110', '7': '0111', '8': '1000', '9': '1001', 'A': '1010', 'B': '1011', 'C': '1100', 'D': '1101', 'E': '1110', 'F': '1111'}
dct2 = {'211': 0, '221': 1, '122': 2, '411': 3, '132': 4, '231': 5, '114': 6, '312': 7, '213': 8, '112': 9}

def solve():
    ans = set()
    for st in sset:
        bst=''              # [1] 16 -> 2
        for ch in st:
            bst += dct1[ch]

        old, cnts = 0, []   # [1] 연속개수를 카운트
        for i in range(len(bst)):
            if bst[i]!=bst[old]:
                cnts.append(i-old)
                old = i
        # print(cnts)
        # [3] 가장 얇은 두께로 나머지 숫자를 나눠줌
        pwd = []
        for i in range(1, len(cnts), 4):
            mn = min(cnts[i:i+3])
            key = str(cnts[i]//mn)+str(cnts[i+1]//mn)+str(cnts[i+2]//mn)
            pwd.append(dct2[key])

        for i in range(0, len(pwd), 8):
            ans.add(tuple(pwd[i:i+8]))

    # 정답처리: 정상이면 누적
    sm = 0
    for code in ans:
        if (sum(code[0:8:2])*3 + sum(code[1:8:2]))%10==0:
            sm += sum(code)
    return sm

T = int(input())
for test_case in range(1, T + 1):
    N, M = map(int, input().strip().split())

    # 입력도 중복제거해서 받기
    sset = set()
    for _ in range(N):
        st = input().strip()
        if st.count('0') != len(st):
            sset.add(st)

    ans = solve()
    print(f'#{test_case} {ans}')
